---
import ResponsiveToggle from "./ResponsiveToggle.astro";
---

<div id="main-navigation" class="is-desktop py-6 px-4">
  <div class="container flex justify-between flex-wrap">
    <a href="/">
      <img
        class="lg:h-10 h-6"
        src={(await import("../assets/img/logo.svg")).default}
        alt="Nirjan's Reviews"
      />
    </a>
    <div class="flex items-center gap-4">
      <nav class="desktop-menu">
        <ul>
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu">
      <ul>
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector("#main-navigation");
  const mainMenu = mainNav.querySelector("ul");
  const dropdownMenus = [...document.querySelectorAll(".has-dropdown button")];

  // functions
  const setActiveMenuItem = () => {
    const menuItems = [
      ...mainMenu.querySelectorAll('a:not([rel*="external"])'),
    ];

    menuItems.forEach((menuItem) => {
      if (menuItem.pathname === window.location.pathname) {
        menuItem.classList.add("is-active");
        menuItem.setAttribute("aria-current", "page");
      }
    });
  };

  const checkMenuSize = () => {
    const mainNavWidth = mainNav.getBoundingClientRect().width;
    const desktopMenuWidth = document
      .querySelector(".desktop-menu")
      .getBoundingClientRect().width;
    const logoWidthBuffer = 300;
    const totalMenuWidth = parseInt(desktopMenuWidth) + logoWidthBuffer;

    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove("is-desktop");
      mainNav.classList.add("is-mobile");
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add("is-desktop");
      mainNav.classList.remove("is-mobile");
    }
  };

  const isOutOfViewport = (element) => {
    const elementBounds = element.getBoundingClientRect();
    return (
      elementBounds.right >
      (window.innerWidth || document.documentElement.clientWidth)
    );
  };

  const openDropdownMenu = (dropdownMenu) => {
    const dropdownList = dropdownMenu.parentNode.querySelector("ul");

    dropdownMenu.classList.add("show");
    dropdownMenu.setAttribute("aria-expanded", "true");

    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = "auto";
    }
  };

  const closeDropdownMenu = (dropdownMenu) => {
    dropdownMenu.classList.remove("show");
    dropdownMenu.setAttribute("aria-expanded", "false");
  };

  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i]);
    }
  };

  const toggleDropdownMenu = (event) => {
    if (event.target.getAttribute("aria-expanded") === "false") {
      closeAllDropdownMenus();
      openDropdownMenu(event.target);
    } else {
      closeDropdownMenu(event.target);
    }
  };

  // execution
  mainMenu &&
    mainMenu.addEventListener("keydown", (event) => {
      const currentMenuItem = event.target.closest("li");
      const menuItems = [...mainMenu.querySelectorAll(".menu-item")];
      const currentDropdownMenu = event.target.closest(".has-dropdown button");
      const currentDropdownMenuItem = event.target.closest(".has-dropdown li");
      const currentIndex = menuItems.findIndex(
        (item) => item === currentMenuItem
      );

      const key = event.key;
      let targetItem;

      if (key === "ArrowRight") {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0];
        } else {
          targetItem = menuItems[currentIndex + 1];
        }
      }

      if (key === "ArrowLeft") {
        if (menuItems.indexOf(currentMenuItem) === 0) {
          targetItem = menuItems[menuItems.length - 1];
        } else {
          targetItem = menuItems[currentIndex - 1];
        }
      }

      if (key === "Escape") {
        targetItem = menuItems[0];
      }

      if (currentDropdownMenu) {
        const firstDropdownItem =
          currentDropdownMenu.nextElementSibling.querySelector("li");

        if (key === "ArrowDown") {
          event.preventDefault();
          openDropdownMenu(currentDropdownMenu);
          targetItem = firstDropdownItem;
        }

        if (key === "Escape") {
          closeDropdownMenu(currentDropdownMenu);
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode;
        const dropdownMenuItems = [
          ...currentDropdownList.querySelectorAll("li"),
        ];
        const currentIndex = dropdownMenuItems.findIndex(
          (item) => item === currentDropdownMenuItem
        );

        if (key === "ArrowDown") {
          event.preventDefault();

          if (
            dropdownMenuItems.indexOf(currentDropdownMenuItem) ===
            dropdownMenuItems.length - 1
          ) {
            targetItem = dropdownMenuItems[0];
          } else {
            targetItem = dropdownMenuItems[currentIndex + 1];
          }
        }

        if (key === "ArrowUp") {
          event.preventDefault();

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
            targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
          } else {
            targetItem = dropdownMenuItems[currentIndex - 1];
          }
        }

        if (key === "Escape") {
          const currentDropdownMenu =
            currentDropdownList.previousElementSibling;
          targetItem = currentDropdownMenu.parentNode;
          closeAllDropdownMenus();
        }
      }

      if (targetItem) {
        targetItem.querySelector("a, button, input").focus();
      }
    });

  dropdownMenus &&
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener("click", toggleDropdownMenu);
    });

  setActiveMenuItem();
  checkMenuSize();
  window.addEventListener("resize", checkMenuSize);
  window.addEventListener("click", (event) => {
    if (
      !event.target.hasAttribute("aria-haspopup") &&
      !event.target.classList.contains("submenu-item")
    ) {
      closeAllDropdownMenus();
    }
  });
</script>

<style lang="scss" is:global>
  #main-navigation {
    &.is-desktop {
      .desktop-menu {
        @apply visible static;
      }

      .mobile-menu {
        @apply hidden;
      }
    }

    &.is-mobile {
      @apply flex-col;

      .mobile-menu {
        @apply hidden;

        &.show {
          @apply block;
        }
      }

      .desktop-menu {
        @apply invisible -z-50 absolute left-0;
      }

      .responsive-toggle {
        @apply block;
      }
    }

    nav {
      > ul {
        @apply flex gap-6 list-none;

        .is-active {
          @apply font-bold;
        }
      }
    }

    .mobile-menu {
      @apply basis-full py-8;

      > ul {
        @apply flex-col;

        ul {
          @apply relative mt-4;
        }
      }

      a,
      button {
        @apply block w-full py-2;
      }
    }

    .has-dropdown {
      position: relative;

      @apply relative;

      > button {
        @apply flex items-center gap-2 p-0 mt-[-1px] border-0  underline leading-6;

        &::after {
          content: "";
          border-width: 0.2em 0.2em 0 0;

          @apply w-3 h-3 mt-[-0.25rem] border-solid rotate-[135deg] transform;
        }

        &.show {
          &::after {
            @apply rotate-[-45deg] mt-1;
          }

          ~ ul {
            @apply flex flex-col gap-4 bg-white ml-0;
          }
        }
      }

      ul {
        @apply hidden absolute z-50 min-w-[200px] top-[125%] right-0 bottom-auto left-0 p-4 bg-white border-black border-2 shadow-lg rounded-sm;
      }
    }
  }
</style>
